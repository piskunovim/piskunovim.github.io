<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-04-23T16:18:43+04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Igor Piskunov</title><subtitle>Be proud of every step that leads you forward and keep run so, that no one can overtake you.</subtitle><entry><title type="html">Resolving coc.nvim Compatibility for TypeScript Support</title><link href="http://localhost:4000/pblog/2023/04/20/update-coc-to-start-coc-tsserver.html" rel="alternate" type="text/html" title="Resolving coc.nvim Compatibility for TypeScript Support" /><published>2023-04-20T00:00:00+04:00</published><updated>2023-04-20T00:00:00+04:00</updated><id>http://localhost:4000/pblog/2023/04/20/update-coc-to-start-coc-tsserver</id><content type="html" xml:base="http://localhost:4000/pblog/2023/04/20/update-coc-to-start-coc-tsserver.html"><![CDATA[<h2 id="introduction">Introduction</h2>

<p>Hey there! If you’re using Neovim or Vim as your code editor, you’re probably familiar with the Conquer of Completion (coc.nvim) extension. It makes TypeScript development a breeze with its coc-tsserver extension, which offers autocompletion, error checking, and more. But what if you encounter a version compatibility issue like this: “coc-tsserver 2.1.3 requires coc.nvim &gt;= 0.0.82, please update coc.nvim”? Don’t worry, we’ll cover two ways of how to resolve this situation.
Don’t worry, we’ll cover two ways of how to resolve this situation.</p>

<h2 id="automatic-update-the-easy-way">Automatic Update: The Easy Way</h2>

<p>First, let’s try the simplest method—using the built-in <code class="language-plaintext highlighter-rouge">:CocUpdate</code> command:</p>

<ol>
  <li>Launch Neovim or Vim.</li>
  <li>Enter command mode and run <code class="language-plaintext highlighter-rouge">:CocUpdate</code>.</li>
  <li>Wait for the update process to finish—it shouldn’t take long!</li>
  <li>Close Neovim or Vim using <code class="language-plaintext highlighter-rouge">:q!</code>.</li>
  <li>Relaunch Neovim or Vim and check the version with <code class="language-plaintext highlighter-rouge">:CocInfo</code>.</li>
</ol>

<p>If all goes well, you’ll see coc.nvim has been updated to version 0.0.82 or higher. But if the automatic update didn’t do the trick, let’s move on to the manual update.</p>

<h2 id="manual-update-taking-matters-into-your-own-hands">Manual Update: Taking Matters into Your Own Hands</h2>

<p>Here’s how to manually update coc.nvim:</p>

<ol>
  <li>Close Neovim or Vim if it’s currently open.</li>
  <li>Open a terminal (or command prompt in Windows).</li>
  <li>Locate your coc.nvim installation directory (check your Neovim or Vim configuration files if you’re unsure).</li>
  <li>Use the <code class="language-plaintext highlighter-rouge">cd</code> command to navigate to the coc.nvim directory.</li>
  <li>Run <code class="language-plaintext highlighter-rouge">git pull</code> to fetch the latest changes and merge them into your local copy.</li>
  <li>Close the terminal and relaunch Neovim or Vim.</li>
  <li>Check the version again with <code class="language-plaintext highlighter-rouge">:CocInfo</code>.</li>
</ol>

<p>Now, coc.nvim should be updated to version 0.0.82 or higher, and coc-tsserver 2.1.3 will work like a charm.</p>

<h2 id="conclusion">Conclusion</h2>

<p>That’s it! You’ve successfully updated coc.nvim, ensuring a seamless TypeScript development experience with coc-tsserver 2.1.3. If you have any questions or need more help, feel free to leave a comment below. Keep coding, and enjoy!</p>]]></content><author><name>Igor Piskunov</name></author><category term="pblog" /><summary type="html"><![CDATA[Introduction]]></summary></entry><entry><title type="html">Command Line Habits - Aliases</title><link href="http://localhost:4000/linux/2022/08/22/command-line-habits-aliases.html" rel="alternate" type="text/html" title="Command Line Habits - Aliases" /><published>2022-08-22T23:04:00+04:00</published><updated>2022-08-22T23:04:00+04:00</updated><id>http://localhost:4000/linux/2022/08/22/command-line-habits-aliases</id><content type="html" xml:base="http://localhost:4000/linux/2022/08/22/command-line-habits-aliases.html"><![CDATA[<h2 id="aliases">Aliases</h2>

<p>Unix-based systems supports lots of various shells that the user could use. In my work environment is widely used zsh and bash. Recently I started practicing fish (friendly interactive shell), but for now it’s only a mention.</p>

<p>Aliases are our friends when it comes to long commands that you have to type on a daily basis.</p>

<p><code class="language-plaintext highlighter-rouge">&gt; alias shortName="your custom command here"</code></p>

<p>To keep aliases between sessions, you can save them in your user’s shell configuration profile file. This can be:</p>

<p>Bash – ~/.bashrc
ZSH – ~/.zshrc
Fish – ~/.config/fish/config.fish</p>

<p>So for example, in bash, you can open .bashrc file with your favorite editor like this:</p>

<p><code class="language-plaintext highlighter-rouge">&gt; vim ~/.bashrc</code></p>

<p>To remove specific alias:</p>

<p><code class="language-plaintext highlighter-rouge">&gt; unalias alias_name</code></p>

<p>To remove all aliases:</p>

<p><code class="language-plaintext highlighter-rouge">&gt; unalias -a</code></p>

<h3 id="my-top-10-aliases">My Top 10 Aliases</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">alias open="nautilus --browser"</code></li>
  <li><code class="language-plaintext highlighter-rouge">alias connectServer = ssh -p (my ssh port number) myuser@myserver</code></li>
  <li><code class="language-plaintext highlighter-rouge">alias dockerClean = docker rm $(docker ps -a -q)</code></li>
  <li><code class="language-plaintext highlighter-rouge">alias upgrade='sudo apt-get update &amp;&amp; sudo apt-get upgrade'</code></li>
  <li><code class="language-plaintext highlighter-rouge">alias netconnections="netstat -tuapw --numeric-hosts --numeric-ports"</code></li>
  <li><code class="language-plaintext highlighter-rouge">alias myip="curl ident.me"</code></li>
  <li><code class="language-plaintext highlighter-rouge">alias openvpn3-start="openvpn3 session-start --config ~/openvpn3/client.ovpn"</code></li>
  <li><code class="language-plaintext highlighter-rouge">alias openvpn3-stop="~/openvpn3/disconnect_cli.sh"</code>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># disconnect_cli.sh
openvpn3 sessions-list | grep Path | awk -v OFS='\t' '{print $2}' | while read -r path; do
  openvpn3 session-manage --path "$path" --disconnect
done
</code></pre></div>    </div>
  </li>
  <li><code class="language-plaintext highlighter-rouge">alias openvpn3-ls="openvpn3 sessions-list"</code></li>
  <li><code class="language-plaintext highlighter-rouge">alias weather="wttr"</code>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wttr() {
  if [ $# -eq 0 ]; then
    echo "No arguments provided"
  else
    curl wttr.in/$1;
  fi
}
</code></pre></div>    </div>
  </li>
</ul>]]></content><author><name></name></author><category term="linux" /><summary type="html"><![CDATA[Aliases]]></summary></entry><entry><title type="html">Have Fun Playing Bones By Imagine Dragons</title><link href="http://localhost:4000/pblog/2022/08/19/imagine-dragons-piano-cover.html" rel="alternate" type="text/html" title="Have Fun Playing Bones By Imagine Dragons" /><published>2022-08-19T20:59:00+04:00</published><updated>2022-08-19T20:59:00+04:00</updated><id>http://localhost:4000/pblog/2022/08/19/imagine-dragons-piano-cover</id><content type="html" xml:base="http://localhost:4000/pblog/2022/08/19/imagine-dragons-piano-cover.html"><![CDATA[<p>It’s a great feeling when you touch the musical instrument again. I’m sure it also enjoys when you touch it. So why do we need to experience the feeling of prolonged separation? Just play and let the music fill the environment. To fill you from inside. It doesn’t matter if you’re an amateur or a professional, this’s always a great opportunity to get in touch with the incredible world of music that can enslave you.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/UGZD5apmcoE" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>]]></content><author><name></name></author><category term="pblog" /><summary type="html"><![CDATA[It’s a great feeling when you touch the musical instrument again. I’m sure it also enjoys when you touch it. So why do we need to experience the feeling of prolonged separation? Just play and let the music fill the environment. To fill you from inside. It doesn’t matter if you’re an amateur or a professional, this’s always a great opportunity to get in touch with the incredible world of music that can enslave you.]]></summary></entry><entry><title type="html">My lovely keyboard</title><link href="http://localhost:4000/pblog/2022/08/17/my-lovely-keyboard-device.html" rel="alternate" type="text/html" title="My lovely keyboard" /><published>2022-08-17T23:33:15+04:00</published><updated>2022-08-17T23:33:15+04:00</updated><id>http://localhost:4000/pblog/2022/08/17/my-lovely-keyboard-device</id><content type="html" xml:base="http://localhost:4000/pblog/2022/08/17/my-lovely-keyboard-device.html"><![CDATA[<p>This is the first post in the “Purchases I have not regretted” series. It’s not an advertisement or technical review. Please, let me know if you see something wrong in my text that could help to improve it. Thank you!</p>

<h3 id="introduction">Introduction</h3>

<p>We live in a time when lots of devices pass through our hands. I think there are two main reasons for this: the fast technological progress and the constant search for a device that would satisfy our needs.</p>

<p>I work a lot on the computer and for me, choosing the right keyboard was a long process. It was a frustrating experience typing on membrane keyboards, and it was sleepless nights for my loved ones due to the loud clicks of mechanical keyboards.</p>

<p>So it was until one day the Logitech MX Keys keyboard fell into my hands, and since then it has become the main keyboard in my house. Today, I am the happy owner of three keyboards of the MX Keys series:</p>

<ul>
  <li>Logitech MX Keys,ft</li>
  <li>Logitech MX Keys Mini,</li>
  <li>Logitech Craft.</li>
</ul>

<p><img src="https://sun9-79.userapi.com/impg/uP8dBCJA9ploA5wVTPsl1YD3iaC5buh9A7-diw/YwTmxFx1n20.jpg?size=1600x1200&amp;quality=95&amp;sign=e3d85a140c3e0a06f00677166cf26e92&amp;type=album" width="480" /></p>

<p>Let’s talk about what makes me interested in these keyboards.</p>

<hr />

<h3 id="advantages">Advantages</h3>

<p>There are three main advantages I see in all MX keyboards:</p>

<ol>
  <li>Quiet key travel.</li>
  <li>Ability to connect to three different devices.</li>
  <li>Wireless connection.</li>
  <li>Long-life battery.</li>
</ol>

<p>No matter which version you choose, you can be sure that these functions will be provided with due comfort. By choosing the version you’re choosing between the form, the weight and some unusual features that I cannot mark as advantages. Let’s try to briefly describe each version.</p>

<p><img src="https://sun9-29.userapi.com/impg/UdM9uKls-ktTd1irw9VFVS6YULojJIcBf0vPSw/1ftzypRq2oY.jpg?size=1600x903&amp;quality=95&amp;sign=afd65e81ec69c4306cf9c06abfe74bd3&amp;type=album " width="480" /></p>

<p><strong>Logitech MX Keys</strong> is a balanced full-scale keyboard. It looks and feels great. Weight is average. Connection technology: Logitech Unifying (I’ll tell you a little later, this is important).</p>

<p><img src="https://sun9-44.userapi.com/impg/haMpRjtTwTFLDlMxyS4__5XnrA0X9gLjtoSOPQ/Tt4K8BKxd28.jpg?size=1600x1200&amp;quality=95&amp;sign=6343d6d6d56b86af70354e968ea88131&amp;type=album " width="480" /></p>

<p><strong>Logitech MX Keys Mini</strong> is a minimized version of the MX Keys. Numpad has been removed, the main letter keys haven’t been touched, and the bottom row of the keyboard has been more tightly packed. The weight is light. Connectivity technology: Bluetooth.</p>

<p><img src="https://sun9-4.userapi.com/impg/jIYOSE_DIgQ31aQGO-NjBfsM-dU47nGOKD1jVQ/5ja3EBCD3Lo.jpg?size=1600x1186&amp;quality=95&amp;sign=4840754aeac501e1f2f65e81fd1d44b8&amp;type=album " width="480" /></p>

<p><strong>Logitech Craft</strong> is a copy of the Logitech MX Keys, weighted down in my opinion an absolutely useless feature called “crown” (an input dial that you won’t use even in those cases where it’s implied). The main idea behind the crown is to use it in the area of digital design and video editing. But in fact, it doesn’t provide functions that could replace convenient editor shortcuts. Moreover, the crown takes extra space and adds weight to the device. As a result, the weight turned out to be heavy, and it’s hard not to notice. Connectivity technology: Logitech Unifying.</p>

<hr />

<h3 id="about-connectivity-technologies">About connectivity technologies</h3>

<p>Let’s talk about two facts that apply to all MX keyboards we’re talking about today:</p>

<ol>
  <li>
    <p>You can connect all these keyboards via Bluetooth.</p>
  </li>
  <li>
    <p>You cannot use any of these keyboards as wired ones.</p>
  </li>
</ol>

<p>The first item in the list means a lot of devices that you’re able to connect easily. And the second one…well…means that we have an issue on BIOS[POST] step when the Bluetooth driver isn’t loaded yet.</p>

<p>Some motherboards support Bluetooth loading in POST, but it will cost you extra money. Logitech MX Keys and Logitech Craft have a resolution to this issue called Logitech’s Unifying technology. All you need to do is to plug in the USB dongle from the kit inside your computer and the keyboards will be available in BIOS.</p>

<p>Until this year, MX Keys Mini had no workaround. It’s truly a Bluetooth keyboard and cannot be connected by using “unifying” technology. That meant, in order to use the keyboard in BIOS, you just need another keyboard. But in 2022 with the new Logitech MX Mechanical Keyboard, the new dongle (Logi Bolt) was announced which is designed to solve the big problem of a small device. So now, if you have MX Keys Mini, I strictly recommend thinking about getting this dongle.</p>

<p><img src="https://resource.logitech.com/content/dam/logitech/en/products/mice/unifying-receiver-usb/gallery/usb-gallery-01.png" width="200" />
<img src="https://resource.logitech.com/content/dam/logitech/en/products/mice/logi-bolt-usb-receiver/gallery/logi-bolt-usb-receiver-gallery-01.png" width="200" /></p>

<blockquote>
  <p>The first one (orange) is “Unifying” receiver and the second one (green) is “Logi Bolt”</p>
</blockquote>

<p>By the way, Logitech Unifying technology also saves battery life, so the keyboard will work longer without charge (Logi Bolt marketing also states that).</p>

<p>All keyboards on a single charge last approximately 14 days. You are more likely to forget when you last charged it. The time frame between charges is really impressive.</p>

<hr />

<h3 id="summary">Summary</h3>

<p>In terms of form factor, I’d personally choose the MX Keys Mini. It’s a great keyboard for travelling, it has all the main features of the MX Keys series, it’s ultimately comfortable to use, and it takes up little space at home. But! The BIOS doesn’t work out of the box (don’t forget about Logi Bolt, but that means additional investment).</p>

<p>The most balanced option is MX Keys. Yes, I’m repeating it again, it’s great and that’s true. It’s full-scaled, it’s still lightweight, and it works in BIOS. But the personal preference for more compact devices makes this device number two on my list.</p>

<p>And, I’m sorry, but the Logitech Craft is rubbish. Frankly, it’s not so different from the MX Keys, but you have to pay extra money for the noticeable weight, additional space at the top of the keyboard, and, of course, for the “crown” spinner. And that’s not fair.</p>

<p><strong>And the winner is MX Keys Mini!</strong> Just because in my case, the form factor makes more sense than BIOS usage. And again, with Logi Bolt this issue should be resolved. I’ll make a note about it if I’ll get one. Just look again, how does MX Keys Mini looks like on the table:</p>

<p><img src="https://sun1-13.userapi.com/impg/c6htvWLKV0O7mZUopS5i6_5Vr0yOqZMPo7rFig/WW0c_vvPkcM.jpg?size=1600x918&amp;quality=95&amp;sign=3ddb92c7fd835f11434a0d80a49bfbbb&amp;type=album " width="480" /></p>

<hr />

<p><img src="https://sun9-1.userapi.com/impg/xDI93kf4Tw45PJclZDDyzNQXs_h-kRqj04-10Q/lsr_AzJBYb8.jpg?size=1280x606&amp;quality=95&amp;sign=5a6540439d5dda9bff9700da83f283b1&amp;type=album" width="480" /></p>

<p>PS #1: Some people say that MX Key keyboards has a proverbial slant. That’s true, but in fact, you won’t notice it. I didn’t until someone told me about that.</p>

<p>PS #2: Additional photo with backlit keys:</p>

<p><img src="https://sun9-83.userapi.com/impg/ASs3k-0XK6DDVpcL4SLFlTp9gdT7XIecz-LCDg/BzhCD9_yEvI.jpg?size=1600x1200&amp;quality=95&amp;sign=eae9e0793bcf28566cffda473c38c2b3&amp;type=album" width="480" /></p>]]></content><author><name></name></author><category term="pblog" /><summary type="html"><![CDATA[This is the first post in the “Purchases I have not regretted” series. It’s not an advertisement or technical review. Please, let me know if you see something wrong in my text that could help to improve it. Thank you!]]></summary></entry><entry><title type="html">Atlassian Cloud Development | Failed to register with the host</title><link href="http://localhost:4000/pblog/2021/11/14/atlassian-cloud-development-failed-to-register-with-the-host.html" rel="alternate" type="text/html" title="Atlassian Cloud Development | Failed to register with the host" /><published>2021-11-14T00:00:00+04:00</published><updated>2021-11-14T00:00:00+04:00</updated><id>http://localhost:4000/pblog/2021/11/14/atlassian-cloud-development-failed-to-register-with-the-host</id><content type="html" xml:base="http://localhost:4000/pblog/2021/11/14/atlassian-cloud-development-failed-to-register-with-the-host.html"><![CDATA[<p>When working with Jira Cloud instances, you may encounter the following error:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Failed to register with host https://&lt;your-instance-name&gt;.atlassian.net
Add-on not registered; no compatible hosts detected
</code></pre></div></div>

<p>Here is a list of the main causes of this error:</p>

<h3 id="1-the-connection-to-the-database-wasnt-established-correctly">1. The connection to the database wasn’t established correctly.</h3>

<p>Please make sure that the credentials for your database are set correctly. Unfortunately,  a minor mistype or mistake could make this happen.</p>

<p>Also, check the schema of the AddonSettings table/collection. If the table was transferred manually, it may have been created incorrectly.</p>

<h3 id="2-instance-with-the-given-name-is-already-registered">2. Instance with the given name is already registered.</h3>

<p>You need to check if the AddonSettings table/collection includes the clientKey of your instance. If it is the case, you should remove this row/document so nothing can block your addon to be installed.</p>

<h3 id="3-the-endpoint-for-the-installed-callback-function-wasnt-configured-correctly">3. The endpoint for the /installed callback function wasn’t configured correctly.</h3>

<p>In short: after the application exchanges handshake(keys) with the Atlassian product instance, our application needs to declare its readiness to work. This can be done by responding with a 200 or 204 code status to a GET request to the /installed endpoint. This request is performed automatically. The only thing necessary to do is to check the existence of the corresponding endpoint in the project.</p>

<p>You can read more about this <a href="https://developer.atlassian.com/cloud/jira/platform/connect-app-descriptor/#lifecycle">here</a>.</p>

<h3 id="4-addon-can-be-running-on-a-network-where-there-is-no-access-to-the-internet-and-ngrok-functions-for-example-an-internal-network-or-a-vpn-with-specific-settings">4. Addon can be running on a network where there is no access to the internet and ngrok functions (for example, an internal network or a VPN with specific settings).</h3>

<p>It is recommended to check the availability of the addon by checking the ngrok tunnel. In case of an access error, it is recommended to connect to another network, disable (in some cases enable) VPN, or contact the administrator of your network.</p>

<h3 id="5-certain-versions-of-the-atlassian-connect-express-package-have-a-problem-with-the-urijs-module">5. Certain versions of the atlassian-connect-express package have a problem with the urijs module.</h3>

<p>In order for the error not to occur, it is necessary:</p>

<ul>
  <li>
    <p>Add the following version of urijs as a dependency: <br />
<span style="color:#E53935">
“urijs”: “1.19.1”
</span> <br /></p>
  </li>
  <li>
    <p>Install dependencies and run the application: <br />
<span style="color:#E53935">
npm install &amp;&amp; npm start
</span></p>
  </li>
</ul>

<h3 id="6-problem-with-the-triple-slash-after-https">6. Problem with the triple slash after https.</h3>

<p>If you noticed that there is a triple-slash after the protocol name then it’s suggested to check if the full address of your instance is specified in the hosts section inside credentials.json file.</p>

<p>Bear in mind that the full address must include the protocol: “https://<your-instance-name>.atlassian.net/".</your-instance-name></p>

<p>For example:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
  "hosts": {
    "https://instance.atlassian.net/": {
      "product": "jira",
      "username": "",
      "password": ""
    }
  }
}
</code></pre></div></div>
<hr style="margin: 35px 0 27px;" />

<p>I hope this one was helpful. <br /><br />Naturally, these are only those cases that occur most often. If you have a case that you would like to share, please write about it in the comments or contact me by email (mail{at}piskunov.im).</p>]]></content><author><name></name></author><category term="pblog" /><summary type="html"><![CDATA[When working with Jira Cloud instances, you may encounter the following error:]]></summary></entry><entry><title type="html">Three years as Atlassian developer</title><link href="http://localhost:4000/pblog/2021/11/05/three-years-as-atlassian-developer.html" rel="alternate" type="text/html" title="Three years as Atlassian developer" /><published>2021-11-05T00:27:38+04:00</published><updated>2021-11-05T00:27:38+04:00</updated><id>http://localhost:4000/pblog/2021/11/05/three-years-as-atlassian-developer</id><content type="html" xml:base="http://localhost:4000/pblog/2021/11/05/three-years-as-atlassian-developer.html"><![CDATA[<p>This big headline means that over the past few years I have had a great opportunity to experience all the delights and disadvantages of the ecosystem of Atlassian products, as well as their API. In particular, everything related to the cloud part of development.</p>

<p>“There are limitations” is the first thing any developer will tell you when it comes to Jira Сloud or Confluence Cloud. This simple statement can make you feel like an insurmountable obstacle is somewhere ahead. But, I propose to shortly figure out what exactly these words mean.</p>

<h3 id="everything-is-in-an-iframe">Everything is in an &lt;iframe&gt;</h3>

<p>All the executable code of your application will be delivered to the cloud product by adding the appropriate iframe element. In fact, this means that your code won’t have access to the Jira/Confluence environment directly and interact with the interface. Instead, you should use a global AP object, location sections, and hooks to help organize your interactions in the most natural way. I hope to tell you more about this someday, but for now this is all you need to know.</p>

<h3 id="all-operations-with-data-through-the-api">All operations with data through the API</h3>

<p>That means that you have no connection to the product’s instance database and cannot access data directly. The only way to get the data is coming through the official Atlassian Cloud API. As a result, if something is absent in the API then it is hard to achieve.</p>

<h3 id="but-limitation-doesnt-mean-impossible">But “limitation” doesn’t mean “impossible”</h3>

<p>It seems obvious, but I decided to highlight it. You can still implement the required feature, but you have to keep in mind the requirements that the product exposes to you.</p>

<p>You must know exactly which areas of the product are affected by your functionality and know what Attlassian’s position on this issue is. Particularly, you shouldn’t try to access those parts of the product that were restricted by the API. If you come across a question that hasn’t been disclosed anywhere, you can write to the community or directly to the Atlassian team. The great thing here is you entering the territory of an extremely hospitable product, with a large community of developers who are always ready to help with your problems.</p>

<h3 id="rely-on-atlassian">Rely on Atlassian</h3>

<p>This simple thought means that if Atlassian Cloud services are not available, then your application won’t be available either.</p>

<h3 id="so">So</h3>

<p>We talked about just one fundamental idea that you need to understand before starting to implement any feature in the Atlassian Cloud world. But, of course, on the way of implementation, the developer encounters various challenges that must be overcome. It will be my pleasure to share some of the solutions to problems that you might encounter in future posts.</p>

<p>Please subscribe and…see you. :)</p>]]></content><author><name></name></author><category term="pblog" /><summary type="html"><![CDATA[This big headline means that over the past few years I have had a great opportunity to experience all the delights and disadvantages of the ecosystem of Atlassian products, as well as their API. In particular, everything related to the cloud part of development.]]></summary></entry><entry><title type="html">One Year Changelog</title><link href="http://localhost:4000/pblog/2019/03/01/one-year-changelog.html" rel="alternate" type="text/html" title="One Year Changelog" /><published>2019-03-01T14:27:38+04:00</published><updated>2019-03-01T14:27:38+04:00</updated><id>http://localhost:4000/pblog/2019/03/01/one-year-changelog</id><content type="html" xml:base="http://localhost:4000/pblog/2019/03/01/one-year-changelog.html"><![CDATA[<p><code class="language-plaintext highlighter-rouge">I know you missed me. So I'm back and I would like to share with you something that happened with me last year.</code></p>

<h3 id="spring-2018">Spring 2018</h3>
<p>I am a mentor. I have a new guy “to play with” and I know what to do with it. He is 19 and in two month he will live our company, but I believe it should be his best experience of work. He knows how to write code, and my goal is to bring him to the next step: to give him idea of how he could be better. By this I mean that I know where I am now, but at the same time I should understand where I can go and what I can do in my current position. It’s not so obvious, but the idea of finding a new ways can bring you extremely valuable habits.</p>

<p>Let’s say you’re staying near the wall somewhere inside the labyrint. You can decide that this is the end of the labyrinth and you’re the winner. But at the same time you could try to find another way and decide that this is the dead end and nothing more. And here is the difference. Our life is a huge labyrinth with unlimited number of dead ends. And in order to be successful in this game you should get more information about its rules. May be you can just break walls, who knows, but you’ll never know this if you’ll never try.
And yeah, about mentorship. I really appreciate this time we spent together. It was not my first experience, but every time it’s like an great journey.</p>

<h3 id="summer-2018">Summer 2018</h3>
<p>No doubt it was time of Amazon MWS. Direction of development in our company has been changed and now we’re creating new cool services in order to sell more with Amazon. Unfortunately I cannot tell you more but that was my first experience with Amazon API. And here I found little cons.</p>

<p>First of all I want to say that I like Amazon and I appreciate work that they do. But requests to their API is highly limited. I understand why and I agree that it makes sense, but it was really restraining for us.</p>

<p>For example, we can process only 6 orders per minute. Let’s say if we have 1000 orders per day, then we need to wait 2 hours 46 minutes to pass them through Amazon API. <a href="https://docs.developer.amazonservices.com/en_US/orders-2013-09-01/Orders_GetOrder.html">Seriously</a>. Anyway we can deal with that.</p>

<h3 id="autumn-2018">Autumn 2018</h3>
<p>Even if you did your job well, there always can be the place for misunderstanding and mistrust. It’s time of a strong words and a big changes. Obviously, any changes in your life serves for the best purposes. At the same time it could hurt. Maybe not you, but someone else.</p>

<p>Direction of software development has been changed to SEO optimization and deep understanding of search engines for manipulation with them. That affected everyone who wants to concentrate on products instead of solving tasks of advertising and promotion.</p>

<p>There is only one way to solve such issue. Stop doing shit you don’t like.</p>

<h3 id="winter-2018-2019">Winter 2018-2019</h3>
<p>Atlassian. I heard a lot about this company and used their products couple of times. But I’ve never thought about to be a part of its developers community. Times change. Right now I’m working in direction of Atlassian Cloud. And to say that I’ve got a new impression about this company would be an understatement.</p>

<p>There are lots of messy places in Atlassian Development. They have two UI libraries that don’t cover their style guide. Their API has three versions with different aproaches to work with. And it’s absolutely ok to find inside ther code such comment:</p>

<p><code class="language-plaintext highlighter-rouge">/* Actually it works not like described in docs. You can find description of the process here #issue_number. */</code></p>

<p>I was surprised to see that in such a big company with a huge number of customers. Anyway it’s a matter of habit. I really like to work with their processes and I think it’s a good possibility to help them and to their developers community(our developers community*).</p>

<h3 id="now-spring-2019">Now (Spring 2019)</h3>

<p>I really appreciate you here with me. Thank you for this. I will try to bring more content to you, cause I really like our communication. I have an idea for my new little project. But lets talk about it next time. Keep doing what you love and let’s keep in touch.</p>]]></content><author><name></name></author><category term="pblog" /><summary type="html"><![CDATA[I know you missed me. So I'm back and I would like to share with you something that happened with me last year.]]></summary></entry><entry><title type="html">Balanced Way To Keep Productive</title><link href="http://localhost:4000/pblog/2018/02/18/balanced-way-to-keep-motivated.html" rel="alternate" type="text/html" title="Balanced Way To Keep Productive" /><published>2018-02-18T02:27:38+04:00</published><updated>2018-02-18T02:27:38+04:00</updated><id>http://localhost:4000/pblog/2018/02/18/balanced-way-to-keep-motivated</id><content type="html" xml:base="http://localhost:4000/pblog/2018/02/18/balanced-way-to-keep-motivated.html"><![CDATA[<p><code class="language-plaintext highlighter-rouge">*While you reading this, I've implemented something new.*
</code><br /><br />
<code class="language-plaintext highlighter-rouge">Best regards, Igor
</code></p>]]></content><author><name></name></author><category term="pblog" /><summary type="html"><![CDATA[*While you reading this, I've implemented something new.* Best regards, Igor]]></summary></entry><entry><title type="html">LoopBack - REST APIs with no coding</title><link href="http://localhost:4000/pblog/2017/12/12/loopback-rest-apis-with-no-coding.html" rel="alternate" type="text/html" title="LoopBack - REST APIs with no coding" /><published>2017-12-12T16:48:03+04:00</published><updated>2017-12-12T16:48:03+04:00</updated><id>http://localhost:4000/pblog/2017/12/12/loopback-rest-apis-with-no-coding</id><content type="html" xml:base="http://localhost:4000/pblog/2017/12/12/loopback-rest-apis-with-no-coding.html"><![CDATA[<blockquote>
  <p>Article is in the process of writing. Last update: 12-12-2017.</p>
</blockquote>

<p>LoopBack is an open-source framework serving as platform for building APIs and microservices in Node.js
Due its friendly environment whole the process of creating API has become pretty easy.</p>

<p>LoopBack officially-supported connectors for the following databases:</p>

<ul>
  <li>Cloudant</li>
  <li>DashDB</li>
  <li>DB2</li>
  <li>DB2 for iSeries</li>
  <li>DB2 for z/OS</li>
  <li>Informix</li>
  <li>MongoDB</li>
  <li>MySQL</li>
  <li>Oracle</li>
  <li>PostgreSQL</li>
  <li>Redis</li>
  <li>SQL Server</li>
  <li>SQLite3</li>
</ul>

<p>Here I’ll try to cover some questions about this framework. Current version is 3.x (we are not covering 4.x development preview).</p>

<p><br /></p>

<h3 id="where-should-i-start">Where should I start?</h3>

<p>As in any other framework, everything starts with <a href="http://loopback.io/doc/en/lb3/index.html">documentation</a>. This article is based on docs, so it’s pretty good if you are ok with that.</p>

<p><br /></p>

<h3 id="how-to-initialize">How to initialize?</h3>

<p>First of all you need to go through this <a href="http://loopback.io/getting-started/">“Getting Started” guide</a>. If you’ll not, it’s ok because I’ll show you something pretty similar here. To be strict we must do it.</p>

<p><strong>Install loopback-cli:</strong></p>

<p><code class="language-plaintext highlighter-rouge">$ npm install -g loopback-cli</code></p>

<p><strong>Create directory for the project:</strong></p>

<p><code class="language-plaintext highlighter-rouge">$ mkdir test-loopback</code></p>

<p><strong>Initialise project (do inside created directory):</strong></p>

<p><code class="language-plaintext highlighter-rouge">$ lb app</code></p>

<p><em>After “lb app” command set all default options. Then dependencies will be installed.</em></p>

<p><strong>Start the project</strong></p>

<p><code class="language-plaintext highlighter-rouge">$ node .</code> or <code class="language-plaintext highlighter-rouge">$ npm start</code></p>

<p><em>(Use command line hints to find out which address and port will be used for your project)</em></p>

<p>Don’t forget to check out “/explore” link (by default: localhost:3000/explore).</p>

<p><br /></p>

<h3 id="how-to-create-a-model-to-persist-data">How to create a model to persist data?</h3>

<p><strong>Create new model command:</strong></p>

<p><code class="language-plaintext highlighter-rouge">lb model</code></p>

<p><em>(Use command line hints to create your first model)</em></p>

<p>For test project I’ve created model “repertoire” with properties:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"name": {
  "type": "string",
  "required": true
},
"date": {
  "type": "date"
},
"description": {
  "type": "string"
},
"genre": {
  "type": "string"
},
"active": {
  "type": "boolean",
  "default": false
}
</code></pre></div></div>

<p>Finally we’ll check some files to see the changes:</p>

<table>
  <tbody>
    <tr>
      <td><em><code class="language-plaintext highlighter-rouge">/server/model-config.json</code></em>  - here was added some basic parameters about your model</td>
    </tr>
  </tbody>
</table>

<table>
  <tbody>
    <tr>
      <td><em><code class="language-plaintext highlighter-rouge">/common/models/repertoire.json</code></em> - here you can see the model definition with base “PersistedModel” that we ingeireted from.</td>
    </tr>
  </tbody>
</table>

<table>
  <tbody>
    <tr>
      <td><em><code class="language-plaintext highlighter-rouge">/common/models/repertoire.js</code></em> - can be used to customise the model behaviour.</td>
    </tr>
  </tbody>
</table>

<p><br /></p>

<h3 id="persist-in-memory-data-to-a-file">Persist in-memory data to a file</h3>

<p>The default datasource (<em><code class="language-plaintext highlighter-rouge">/server/datasources.json</code></em>) for LoopBack uses a connector that persists the data in memory. This means that the data will be losted after you’ll restart application.</p>

<p>In development mode this will be useful to persist this data temporarily. To do so we need to add <code class="language-plaintext highlighter-rouge">file</code> proprety inside <code class="language-plaintext highlighter-rouge">db</code> property in <em><code class="language-plaintext highlighter-rouge">/server/datasources.json</code></em>.</p>

<p>Ok, example:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"db": {
    "name": "db",
    "connector": "memory",
    "file": "repertoire.json"
}
</code></pre></div></div>

<p><br /></p>

<h3 id="setup-a-development-mode">Setup a development mode</h3>

<p>We do this by installing <code class="language-plaintext highlighter-rouge">nodemon</code> as a dev dependency:</p>

<p><code class="language-plaintext highlighter-rouge">$ npm install --save-dev nodemon</code></p>

<p>And creating a script <code class="language-plaintext highlighter-rouge">dev</code> inside <em><code class="language-plaintext highlighter-rouge">/package.json</code></em>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"scripts"{
	"dev": "nodemon server/server.js --watch common --watch server"
	...
}
</code></pre></div></div>

<p>After that we can execute dev-script by running:</p>

<p><code class="language-plaintext highlighter-rouge">$ npm run dev</code></p>

<p>When running in develpoment mode the server will be automatically restarted when there are changes detected in the <em><code class="language-plaintext highlighter-rouge">/common</code></em> or <em><code class="language-plaintext highlighter-rouge">/server</code></em> directories. To know more about <code class="language-plaintext highlighter-rouge">nodemon</code> see <a href="https://github.com/remy/nodemon#nodemon">Nodemon Documentation</a>.</p>

<p><br /></p>

<h3 id="discovery-models-from-relational-databases">Discovery models from relational databases</h3>

<ul>
  <li>Setup your mysql data in <em><code class="language-plaintext highlighter-rouge">/server/datasources.json</code></em> file:</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
  "db": {
    "name": "db",
    "connector": "memory"
  },
  "accountDs": {
    "host": "mysqlServerName",
    "port": 3306,
    "database": "databaseName",
    "username": "username",
    "password": "password!",
    "name": "repertoireDB",
    "connector": "mysql"
  }
}
</code></pre></div></div>

<ul>
  <li>Create the models folder if doesn’t exist:</li>
</ul>

<p><em><code class="language-plaintext highlighter-rouge">/common/models</code></em></p>

<ul>
  <li>Create <code class="language-plaintext highlighter-rouge">script.js</code> on <em><code class="language-plaintext highlighter-rouge">/project/server/bin</code></em> folder to discover and build models:</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var path = require('path');
var fs = require('fs');
var app = require(path.resolve(__dirname, '../server'));
var outputPath = path.resolve(__dirname, '../../common/models');

var dataSource = app.dataSources.accountDs;

function schemaCB(err, schema) {
  if(schema) {
    console.log("Auto discovery success: " + schema.name);
    var outputName = outputPath + '/' +schema.name + '.json';
    fs.writeFile(outputName, JSON.stringify(schema, null, 2), function(err) {
      if(err) {
        console.log(err);
      } else {
        console.log("JSON saved to " + outputName);
      }
    });
  }
  if(err) {
    console.error(err);
    return;
  }
  return;
};

dataSource.discoverSchema('tableName',{schema:'schemaName'},schemaCB);
</code></pre></div></div>]]></content><author><name></name></author><category term="pblog" /><summary type="html"><![CDATA[Article is in the process of writing. Last update: 12-12-2017.]]></summary></entry><entry><title type="html">Command Line Habits - Grep</title><link href="http://localhost:4000/linux/2017/12/10/command-line-habits-grep.html" rel="alternate" type="text/html" title="Command Line Habits - Grep" /><published>2017-12-10T21:16:25+04:00</published><updated>2017-12-10T21:16:25+04:00</updated><id>http://localhost:4000/linux/2017/12/10/command-line-habits-grep</id><content type="html" xml:base="http://localhost:4000/linux/2017/12/10/command-line-habits-grep.html"><![CDATA[<p>Grep is considered as one of the most useful commands on Unix-like operating systems. Here you’ll get basics that can be useful in your work.</p>

<p><br /></p>

<h3 id="search-the-contents-of-files">Search the contents of files</h3>

<p><code class="language-plaintext highlighter-rouge">grep [pattern] [file(s)]</code></p>

<p><em>Example:</em></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; grep "import" *js
</code></pre></div></div>

<p><br /></p>

<h3 id="case-insensitive-search">Case-insensitive search</h3>

<p><code class="language-plaintext highlighter-rouge">grep -i [pattern] [file(s)]</code></p>

<p><em>Example:</em></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; grep -i "apiservice" *Service.js
</code></pre></div></div>

<p><br /></p>

<h3 id="search-recursevly-inside-directory">Search recursevly inside directory</h3>

<p><code class="language-plaintext highlighter-rouge">grep -r [pattern] [path]</code></p>

<p><em>Example:</em></p>

<p><em>-&gt; Find “api” instances in the current directory recursevly</em></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; grep -r "api" . 
</code></pre></div></div>

<p><br /></p>

<h3 id="find-files-by-pattern">Find files by pattern</h3>

<p>Sometimes there is a need to search inside files that could be selected by part of their name or extension.</p>

<p><code class="language-plaintext highlighter-rouge">find [path] -name [pattern]</code></p>

<p><em>Examples:</em></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; find . -name "*Service.js"
</code></pre></div></div>

<p><br /></p>

<h3 id="combining-find-and-grep-with-xargs">Combining find and grep with xargs</h3>

<p><code class="language-plaintext highlighter-rouge">xargs</code> is a command used to build and execute commands. By default it’s using <code class="language-plaintext highlighter-rouge">echo</code> command.</p>

<p><em>Example:</em></p>

<p><em>-&gt; Outputs the strings of find result</em></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; find . -name "*js" | xargs
</code></pre></div></div>

<p><em>-&gt; Outputs “todo” instances for files that ends with “Service.js”</em></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; find . -name "*Service.js" | xargs grep "todo"
</code></pre></div></div>
<p><em>-&gt; Same as previous command. You can use it, but using “find” is preferable from the side that we can test its output and be sure that pattern is ok</em></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; grep -r --include="*Service.js" "todo" . 
</code></pre></div></div>

<p><br /></p>

<h3 id="search-contents-of-git-repository">Search contents of git repository</h3>

<p><code class="language-plaintext highlighter-rouge">git grep [pattern]</code></p>

<p><em>Example:</em></p>

<p><em>-&gt; Searching “version” string in your project tracked files</em></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>`git grep version`
</code></pre></div></div>

<p><br /></p>

<h3 id="show-context-around-grep-search">Show context around grep search</h3>

<p><strong>Grep mark up options:</strong></p>

<p><code class="language-plaintext highlighter-rouge">-n</code> : each output line is preceded by its relative line number in the file, starting at line 1</p>

<p><code class="language-plaintext highlighter-rouge">--color(-colour)</code> : mark up the matching text with the expression stored in GREP_COLOR environment variable</p>

<p><strong>Grep context options:</strong></p>

<p><code class="language-plaintext highlighter-rouge">-A [num]</code> : print “num” lines of trailing context after each match</p>

<p><code class="language-plaintext highlighter-rouge">-B [num]</code> : print “num” lines of leading context before each match</p>

<p><code class="language-plaintext highlighter-rouge">-C [num]</code> : print “num” lines of leading and trailing context surrounding each match. By default is 2 and is equivalent to <code class="language-plaintext highlighter-rouge">-A 2 -B 2</code></p>

<p><br /></p>

<h3 id="regular-expressions">Regular expressions</h3>

<p><strong>Basic:</strong></p>

<p><code class="language-plaintext highlighter-rouge">.</code> : any character</p>

<p><code class="language-plaintext highlighter-rouge">\</code> : escaping character (like <code class="language-plaintext highlighter-rouge">\.</code> for dot)</p>

<p><code class="language-plaintext highlighter-rouge">*</code> : zero or more occurences of the regular expression</p>

<p><strong>Extended:</strong></p>

<p>To use extended regular expressions with grep, you’ll need to either escape them with backslashes or turn on extended regular expressions with the <code class="language-plaintext highlighter-rouge">-E</code> option.</p>

<p><code class="language-plaintext highlighter-rouge">?</code> : matches zero or one occurence of the one-character regular expression</p>

<p><code class="language-plaintext highlighter-rouge">+</code> : matches one or more occurence of the one-character regular expression</p>

<p><code class="language-plaintext highlighter-rouge">|</code> : separate alternatives</p>

<p><code class="language-plaintext highlighter-rouge">^</code> : matches the begining of a line</p>

<p><code class="language-plaintext highlighter-rouge">$</code> : matches the end of a line</p>

<p><code class="language-plaintext highlighter-rouge">[]</code> : mathes any one character in that string</p>

<p><code class="language-plaintext highlighter-rouge">()</code> : for grouping expressions</p>

<p><br /></p>

<h3 id="find-matches-excluding-a-pattern">Find matches excluding a pattern</h3>

<p><code class="language-plaintext highlighter-rouge">&gt; find [path] -name [pattern] | grep -v [pattern]</code></p>

<p><code class="language-plaintext highlighter-rouge">-v</code> : option for inverse</p>]]></content><author><name></name></author><category term="linux" /><summary type="html"><![CDATA[Grep is considered as one of the most useful commands on Unix-like operating systems. Here you’ll get basics that can be useful in your work.]]></summary></entry></feed>